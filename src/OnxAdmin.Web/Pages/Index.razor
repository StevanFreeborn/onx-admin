@page "/"
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject IAnthropicService AnthropicService

<div class="container">
  <div class="messages-container">
    @foreach (var message in messages)
    {
      <div class="message message-@(message.Role.ToString().ToLower())">
        <p>@((string)message)</p>
      </div>
    }
    @if (string.IsNullOrWhiteSpace(_assistantResponse) is false)
    {
      <div class="message message-assistant">
        <p>@_assistantResponse</p>
      </div>
    }
  </div>
  <div class="input-container">
    <div class="prompt-wrapper">
      <textarea name="prompt" id="prompt" placeholder="Message OnxAdmin" @oninput="HandlePromptInput"
        @onfocus="HandlePromptFocus" @onblur="HandlePromptBlur" rows="1" dir="auto" value="@_prompt"></textarea>
      <button type="button" class="send-button" @onclick="HandleSendButtonClick">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
          <path
            d="M498.1 5.6c10.1 7 15.4 19.1 13.5 31.2l-64 416c-1.5 9.7-7.4 18.2-16 23s-18.9 5.4-28 1.6L284 427.7l-68.5 74.1c-8.9 9.7-22.9 12.9-35.2 8.1S160 493.2 160 480V396.4c0-4 1.5-7.8 4.2-10.7L331.8 202.8c5.8-6.3 5.6-16-.4-22s-15.7-6.4-22-.7L106 360.8 17.7 316.6C7.1 311.3 .3 300.7 0 288.9s5.9-22.8 16.1-28.7l448-256c10.7-6.1 23.9-5.5 34 1.4z" />
        </svg>
        <span class="sr-only">Send</span>
      </button>
    </div>
  </div>
</div>

@code
{
  private string _prompt { get; set; } = string.Empty;
  private string _assistantResponse { get; set; } = string.Empty;
  private IJSObjectReference? module;
  private List<Message> messages = new List<Message>();

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Index.razor.js");
    }
  }

  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    try
    {
      if (module is not null)
      {
        await module.DisposeAsync();
      }
    }
    catch (Exception ex) when (ex is JSDisconnectedException)
    {
      // The JS runtime is disconnected, no need to dispose
    }
  }

  private async Task HandlePromptFocus()
  {
    if (module is not null)
    {
      await module.InvokeVoidAsync("focusPrompt");
    }
  }

  private async Task HandlePromptBlur()
  {
    if (module is not null)
    {
      await module.InvokeVoidAsync("blurPrompt");
    }
  }

  private async Task HandlePromptInput(ChangeEventArgs e)
  {
    _prompt = e?.Value?.ToString() ?? string.Empty;

    if (module is not null)
    {
      await module.InvokeVoidAsync("resizePrompt");
    }
  }

  private async Task HandleSendButtonClick()
  {
    if (string.IsNullOrWhiteSpace(_prompt))
    {
      return;
    }

    messages.Add(new(RoleType.User, _prompt));
    _prompt = string.Empty;

    if (module is not null)
    {
      await module.InvokeVoidAsync("resetPrompt");
      await module.InvokeVoidAsync("scrollToBottom");
    }

    var assistantResponse = AnthropicService.GenerateResponseAsync(messages);

    await foreach (var response in assistantResponse)
    {
      _assistantResponse += response;
      StateHasChanged();

      if (module is not null)
      {
        await module.InvokeVoidAsync("scrollToBottom");
      }
    }

    messages.Add(new(RoleType.Assistant, _assistantResponse));
    _assistantResponse = string.Empty;
  }
}