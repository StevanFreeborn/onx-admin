@page "/chat"
@using Azure.AI.OpenAI
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject Kernel Kernel

<PageTitle>OnxAdmin - Semantic Kernel</PageTitle>

<div class="container">
  <div class="messages-container">
    @foreach (var message in _messages)
    {
        <div class="message message-@(message.Role.ToString().ToLower())">
          <div class="message-wrapper">
            @if (message.Role == AuthorRole.User && string.IsNullOrWhiteSpace(message.Content) is false)
            {
              @((MarkupString)Markdown.ToHtml(message.Content, _pipeline))
            }
            @if (message.Role == AuthorRole.Assistant && string.IsNullOrWhiteSpace(message.Content) is false)
            {
              @((MarkupString)Markdown.ToHtml(message.Content, _pipeline))
            }
            @if (message.Role == AuthorRole.Assistant && message.Metadata is not null)
            {
              var metadata = message.Metadata.Values.OfType<List<ChatCompletionsFunctionToolCall>>().FirstOrDefault();
              
              if (metadata is not null)
              {
                @foreach(var item in metadata)
                {
                  <div class="tool-use">@item.Name</div>
                }
              }
            }
            @if (message.Role == AuthorRole.Tool && string.IsNullOrWhiteSpace(message.Content) is false)
            {
              <div class="tool-result">
                @((MarkupString)Markdown.ToHtml(message.Content, _pipeline))
              </div>
            }
          </div>
        </div>
    }
    @if (string.IsNullOrWhiteSpace(_assistantResponse) is false)
    {
      <div class="message message-assistant">
        <p>@((MarkupString)Markdown.ToHtml(_assistantResponse, _pipeline))</p>
      </div>
    }
    @if (_isRunning)
    {
      <div class="message message-assistant">
        <div class="typing">
          <span></span>
          <span></span>
          <span></span>
        </div>
      </div>
    }
  </div>
  <div class="input-container">
    <div class="prompt-wrapper">
      <textarea name="prompt" id="prompt" placeholder="Message OnxAdmin" @oninput="HandlePromptInput"
        @onfocus="HandlePromptFocus" @onblur="HandlePromptBlur" @onkeydown="HandlePromptKeydown" rows="1" dir="auto"
        value="@_prompt"></textarea>
      <button type="button" class="send-button" @onclick="HandleSendButtonClick">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
          <path
            d="M498.1 5.6c10.1 7 15.4 19.1 13.5 31.2l-64 416c-1.5 9.7-7.4 18.2-16 23s-18.9 5.4-28 1.6L284 427.7l-68.5 74.1c-8.9 9.7-22.9 12.9-35.2 8.1S160 493.2 160 480V396.4c0-4 1.5-7.8 4.2-10.7L331.8 202.8c5.8-6.3 5.6-16-.4-22s-15.7-6.4-22-.7L106 360.8 17.7 316.6C7.1 311.3 .3 300.7 0 288.9s5.9-22.8 16.1-28.7l448-256c10.7-6.1 23.9-5.5 34 1.4z" />
        </svg>
        <span class="sr-only">Send</span>
      </button>
    </div>
  </div>
</div>

@code
{
  private string _prompt { get; set; } = string.Empty;
  private string _assistantResponse { get; set; } = string.Empty;
  private bool _isRunning = false;
  private readonly ChatHistory _messages = new();
  private readonly OpenAIPromptExecutionSettings _promptExecSettings = new()
  {
    ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions,
    ChatSystemPrompt = "The following is a conversation with an AI assistant. The assistant is helpful, creative, clever, and very friendly. DO NOT make up functions or tools.",
  };

  private readonly MarkdownPipeline _pipeline = new MarkdownPipelineBuilder()
    .UseAdvancedExtensions()
    .UseAutoLinks(new() { OpenInNewWindow = true, UseHttpsForWWWLinks = true })
    .UseEmojiAndSmiley()
    .UseSoftlineBreakAsHardlineBreak()
    .Build();

  private IJSObjectReference? Module;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      Module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Chat.razor.js");
    }
  }

  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    try
    {
      if (Module is not null)
      {
        await Module.DisposeAsync();
      }
    }
    catch (Exception ex) when (ex is JSDisconnectedException)
    {
      // The JS runtime is disconnected, no need to dispose
    }
  }

  private async Task HandlePromptFocus()
  {
    if (Module is not null)
    {
      await Module.InvokeVoidAsync("focusPrompt");
    }
  }

  private async Task HandlePromptBlur()
  {
    if (Module is not null)
    {
      await Module.InvokeVoidAsync("blurPrompt");
    }
  }

  private async Task HandlePromptInput(ChangeEventArgs e)
  {
    _prompt = e?.Value?.ToString() ?? string.Empty;

    if (Module is not null)
    {
      await Module.InvokeVoidAsync("resizePrompt");
    }
  }

  private async Task HandlePromptKeydown(KeyboardEventArgs e)
  {
    if (e.Key == "Enter" && e.CtrlKey)
    {
      await HandleSendButtonClick();
    }
  }

  private void AddMessage(AuthorRole role, string text)
  {
    if (role == AuthorRole.User)
    {
      _prompt = string.Empty;
    }

    _messages.Add(new ChatMessageContent(role, text));
    StateHasChanged();
  }

  private void AddMessage(ChatMessageContent message)
  {
    _messages.Add(message);
    StateHasChanged();
  }

  private void UpdateRunningState(bool isRunning)
  {
    _isRunning = isRunning;
    StateHasChanged();
  }

  private async Task HandleSendButtonClick()
  {
    if (string.IsNullOrWhiteSpace(_prompt))
    {
      return;
    }

    UpdateRunningState(true);

    AddMessage(AuthorRole.User, _prompt);

    if (Module is not null)
    {
      await Module.InvokeVoidAsync("resetPrompt");
      await Module.InvokeVoidAsync("scrollToBottom");
    }

    var chatService = Kernel.GetRequiredService<IChatCompletionService>();
    
    var response = chatService.GetStreamingChatMessageContentsAsync(
      chatHistory: _messages, 
      executionSettings: _promptExecSettings, 
      kernel: Kernel
    );

    UpdateRunningState(false);

    ChatMessageContent? messageContent = null;

    await foreach (var content in response)
    {
      if (content.Role.HasValue)
      {        
        messageContent = new(
          content.Role ?? AuthorRole.Assistant,
          content.Content,
          modelId: content.ModelId,
          innerContent: content.InnerContent,
          encoding: content.Encoding,
          metadata: content.Metadata
        );
      }

      _assistantResponse += content.Content;
      StateHasChanged();

      if (messageContent is null)
      {
        continue;
      }

      messageContent.Content += content.Content;
    }

    if (messageContent is not null)
    {
      _assistantResponse = string.Empty;
      AddMessage(messageContent);
    }

    if (Module is not null)
    {
      await Module.InvokeVoidAsync("scrollToBottom");
    }
  }
}